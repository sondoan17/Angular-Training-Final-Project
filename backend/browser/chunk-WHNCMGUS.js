import{Ka as m}from"./chunk-NGTXV4ZG.js";import{b as g}from"./chunk-SRORKJFO.js";import{J as n,ba as a,ea as u,ja as p,u as i}from"./chunk-65NVJTBR.js";var s=class extends Error{};s.prototype.name="InvalidTokenError";function f(o){return decodeURIComponent(atob(o).replace(/(.)/g,(e,t)=>{let r=t.charCodeAt(0).toString(16).toUpperCase();return r.length<2&&(r="0"+r),"%"+r}))}function I(o){let e=o.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return f(e)}catch{return atob(e)}}function d(o,e){if(typeof o!="string")throw new s("Invalid token specified: must be a string");e||(e={});let t=e.header===!0?0:1,r=o.split(".")[t];if(typeof r!="string")throw new s(`Invalid token specified: missing part #${t+1}`);let c;try{c=I(r)}catch(l){throw new s(`Invalid token specified: invalid base64 for part #${t+1} (${l.message})`)}try{return JSON.parse(c)}catch(l){throw new s(`Invalid token specified: invalid json for part #${t+1} (${l.message})`)}}var h=class o{constructor(e){this.http=e}apiUrl=`${m.apiUrl}/api/auth`;register(e,t,r){return this.http.post(`${this.apiUrl}/register`,{username:e,email:t,password:r}).pipe(n(this.handleError))}login(e,t){return this.http.post(`${this.apiUrl}/login`,{username:e,password:t}).pipe(a(r=>{localStorage.setItem("token",r.token),localStorage.setItem("userId",r.userId),localStorage.setItem("username",r.username)}))}loginWithGoogle(e){return this.http.post(`${this.apiUrl}/google`,{token:e}).pipe(a(t=>{localStorage.setItem("token",t.token),localStorage.setItem("userId",t.userId),localStorage.setItem("username",t.username)}),n(this.handleError))}handleSuccessfulAuth(e){e&&e.token&&(localStorage.setItem("token",e.token),localStorage.setItem("username",e.username))}handleError(e){let t="An unknown error occurred!";return e.error instanceof ErrorEvent||e.error&&typeof e.error=="object"&&"message"in e.error?t=e.error.message:e.status===401?t="Invalid credentials":e.status===409&&(t="Username or email already exists"),i(()=>new Error(t))}isLoggedIn(){return!!localStorage.getItem("token")}logout(){localStorage.removeItem("token"),localStorage.removeItem("userId"),localStorage.removeItem("username")}getUsername(){let e=this.getToken();if(e)try{let t=d(e);return t.username||t.sub||t.user&&t.user.username||null}catch(t){console.error("Error decoding token:",t)}return localStorage.getItem("username")}getToken(){return localStorage.getItem("token")}getCurrentUserId(){return localStorage.getItem("userId")}getCurrentUsername(){return localStorage.getItem("username")||""}getUser(){let e=localStorage.getItem("token");if(e){let t=JSON.parse(atob(e.split(".")[1]));return{id:t.userId,username:t.username}}return null}forgotPassword(e){return this.http.post(`${this.apiUrl}/forgot-password`,{email:e}).pipe(a(()=>{console.log("Password reset email sent successfully")}),n(t=>(console.error("Error sending password reset email:",t),i(()=>t))))}resetPassword(e,t){return this.http.post(`${this.apiUrl}/reset-password`,{token:e,newPassword:t}).pipe(a(()=>{console.log("Password reset successfully")}),n(r=>(console.error("Error resetting password:",r),i(()=>r))))}static \u0275fac=function(t){return new(t||o)(p(g))};static \u0275prov=u({token:o,factory:o.\u0275fac,providedIn:"root"})};export{h as a};
